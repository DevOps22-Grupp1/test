version: "3"
services:
  mongo-order-processing-service:
    image: mongo
    restart: always
    networks:
      - my_network
    volumes:
      - ./init/order/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    #   - ./data-order-processing-service:/data/db
    healthcheck:
      test: echo 'mongo-order-processing-service.runCommand("ping").ok' | mongosh mongo-order-processing-service:27017 --quiet
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 200s
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: allOrders


  mongo-user-management-service:
    image: mongo
    restart: always
    networks:
      - my_network
    volumes:
      - ./init/user/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
      # - ./data-user-management-service:/data/db
    healthcheck:
      test: echo 'mongo-user-management-service.runCommand("ping").ok' | mongosh mongo-user-management-service:27017 --quiet
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 200s
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: allUsers

  mongo-product-catalog-service:
    image: mongo
    restart: always
    networks:
      - my_network
    volumes:
      - ./mongo-data:/data/db
      - ./init/product/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    healthcheck:
      test: echo 'mongo-product-catalog-service.runCommand("ping").ok' | mongosh mongo-product-catalog-service:27017 --quiet
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 200s
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: allProducts

  order-processing-service:
    image: passwordnotsafe/order-processing-service
    ports:
      - 4007:4007
    networks:
      - my_network
    # depends_on:
    #   mongo-order-processing-service:
    #     condition: service_healthy
    environment:
      - SERVER_PORT=4007
      - DB_HOST=mongo-order-processing-service
      - DB_PORT=27017
      - DB_USERNAME=root
      - DB_PASSWORD=example

  # home-page-service:
  #   image: passwordnotsafe/home-page-service
  #   networks:
  #     - my_network
  #   ports:
  #     - "4004:4004"
  #   environment:
  #     - SERVER_PORT=4004
  #     - PRODUCT_URL=scamazon-product-catalog-service-1
  #     - PRODUCT_PORT=4005
  #     - USER_URL=scamazon-user-management-service-1
  #     - USER_PORT=4006
  #     - ORDER_URL=scamazon-order-processing-service-1
  #     - ORDER_PORT=4007

  ###################################################################################

  # order-processing-service:
  #   image: passwordnotsafe/order-processing-service
  #   ports:
  #     - 4007:4007
  #   networks:
  #     - my_network
  #   depends_on:
  #     mongo-order-processing-service:
  #       condition: service_healthy
  #   environment:
  #     - SERVER_PORT=4007
  #     - DB_HOST=mongo-order-processing-service
  #     - DB_PORT=27017
  #     - DB_USERNAME=root
  #     - DB_PASSWORD=example

  # mongo-order-processing-service:
  #   image: mongo
  #   restart: always
  #   networks:
  #     - my_network
  #   volumes:
  #     - ./init/order/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
  #   #   - ./data-order-processing-service:/data/db
  #   healthcheck:
  #     test: echo 'mongo-order-processing-service.runCommand("ping").ok' | mongosh mongo-order-processing-service:27017 --quiet
  #     interval: 5s
  #     timeout: 5s
  #     retries: 20
  #     start_period: 200s
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: root
  #     MONGO_INITDB_ROOT_PASSWORD: example
  #     MONGO_INITDB_DATABASE: allOrders

  # mongo-express-order-processing-service:
  #   image: mongo-express
  #   restart: always
  #   ports:
  #     - 8084:8081
  #   networks:
  #     - my_network
  #   depends_on:
  #     mongo-order-processing-service:
  #       condition: service_healthy
  #   environment:
  #     ME_CONFIG_MONGODB_ADMINUSERNAME: root
  #     ME_CONFIG_MONGODB_ADMINPASSWORD: example
  #     ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo-order-processing-service:27017/

  ##########################################################################################

  # product-catalog-service:
  #   image: passwordnotsafe/produkt-catalog-service
  #   networks:
  #     - my_network
  #   ports:
  #     - 4005:4005
  #   depends_on:
  #     mongodb:
  #       condition: service_healthy
  #   environment:
  #     - DB_HOST=mongo-product-catalog-service
  #     - DB_USERNAME=root
  #     - DB_PASSWORD=example
  #     - DB_PORT=27017
  #     - SERVER_PORT=4005

  # ##########################################################################################

  # user-management-service:
  #   image: passwordnotsafe/user-management-service
  #   ports:
  #     - 4006:4006
  #   networks:
  #     - my_network
  #   depends_on:
  #     mongo-user-management-service:
  #       condition: service_healthy
  #   environment:
  #     - SERVER_PORT=4006
  #     - DB_USERNAME=root
  #     - DB_PASSWORD=example
  #     - DB_HOST=mongo-user-management-service
  #     - DB_PORT=27017

  # mongo-user-management-service:
  #   image: mongo
  #   restart: always
  #   networks:
  #     - my_network
  #   volumes:
  #     - ./init/user/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
  #     # - ./data-user-management-service:/data/db
  #   healthcheck:
  #     test: echo 'mongo-user-management-service.runCommand("ping").ok' | mongosh mongo-user-management-service:27017 --quiet
  #     interval: 5s
  #     timeout: 5s
  #     retries: 20
  #     start_period: 200s
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: root
  #     MONGO_INITDB_ROOT_PASSWORD: example
  #     MONGO_INITDB_DATABASE: allUsers

  # mongo-express-user-management-service:
  #   image: mongo-express
  #   restart: always
  #   ports:
  #     - 8083:8081
  #   networks:
  #     - my_network
  #   depends_on:
  #     mongo-user-management-service:
  #       condition: service_healthy
  #   environment:
  #     ME_CONFIG_MONGODB_ADMINUSERNAME: root
  #     ME_CONFIG_MONGODB_ADMINPASSWORD: example
  #     ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo-user-management-service:27017/

networks:
  my_network:
    driver: bridge
